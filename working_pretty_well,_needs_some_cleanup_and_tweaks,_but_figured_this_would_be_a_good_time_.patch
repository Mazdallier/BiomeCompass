Index: BiomeCompass.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- BiomeCompass.iml	(revision c502ffffae0e56854bce7d18afbc30a29b9dd1d7)
+++ BiomeCompass.iml	(revision )
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="BiomeCompass" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="com.yourname.modid" external.system.module.version="1.0" type="JAVA_MODULE" version="4">
+<module external.linked.project.id="BiomeCompass" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="com.drazisil.biomecompass" external.system.module.version="1.0" type="JAVA_MODULE" version="4">
   <component name="NewModuleRootManager" inherit-compiler-output="false">
     <output url="file://$MODULE_DIR$/build/classes/main" />
     <output-test url="file://$MODULE_DIR$/build/classes/test" />
\ No newline at end of file
Index: .idea/dictionaries/joseph.xml
===================================================================
--- .idea/dictionaries/joseph.xml	(revision c502ffffae0e56854bce7d18afbc30a29b9dd1d7)
+++ .idea/dictionaries/joseph.xml	(revision c502ffffae0e56854bce7d18afbc30a29b9dd1d7)
@@ -1,3 +0,0 @@
-<component name="ProjectDictionaryState">
-  <dictionary name="joseph" />
-</component>
\ No newline at end of file
Index: src/main/java/com/drazisil/biomecompass/commands/biomeCompassCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/drazisil/biomecompass/commands/biomeCompassCommand.java	(revision c502ffffae0e56854bce7d18afbc30a29b9dd1d7)
+++ src/main/java/com/drazisil/biomecompass/commands/BiomeCompassCommand.java	(revision )
@@ -6,13 +6,19 @@
 import net.minecraft.util.ChunkCoordinates;
 import net.minecraft.world.World;
 import net.minecraft.world.biome.BiomeGenBase;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 import java.util.List;
 
-/**
- * Created by joseph on 1/28/2015.
- */
 public class BiomeCompassCommand implements ICommand {
+
+    private static final Logger logger = LogManager.getLogger("BiomeCompass");
+    private World world = null;
+    private int chunkSize = 16;
+    private int scanRadius = 25;
+
     @Override
     public String getCommandName() {
         return "biomecompass";
@@ -29,30 +35,39 @@
     }
 
     @Override
-    public void processCommand(ICommandSender sender, String[] argString)
-    {
-        int chunkSize = 16;
+    public void processCommand(ICommandSender sender, String[] argString) {
-        
+
-        World world = sender.getEntityWorld();
+        // TODO: Add console handling
+        world = sender.getEntityWorld();
-        
+
         ChunkCoordinates senderChoords = sender.getPlayerCoordinates();
         int senderX = senderChoords.posX;
         int senderZ = senderChoords.posZ;
 
+
+        if (argString.length > 0) {
+
+                    /* Some biomes have more then one word in the name.
+                    Assume all arguments are part of the name
+                     */
+            String requestedBiomeName = StringUtils.join(argString, " ").toLowerCase();
+            scanForBiomeMatch(senderX, senderZ, requestedBiomeName);
+        }
+
-        BiomeGenBase senderBiome = world.getBiomeGenForCoords(senderX, senderZ);
+            BiomeGenBase senderBiome = world.getBiomeGenForCoords(senderX, senderZ);
 
 
-        if (!world.isRemote)
-        {
-            sender.addChatMessage(new ChatComponentText("You are in a "+ senderBiome.biomeName));
+            if (!world.isRemote) {
+                sender.addChatMessage(new ChatComponentText("You are in a " + senderBiome.biomeName + " " + senderX + "," + senderZ));
 
-        }
-    }
+            }
+        }
 
+
     /**
      * Returns true if the given command sender is allowed to use this command.
      *
-     * @param p_71519_1_
+     * @param sender
      */
     @Override
     public boolean canCommandSenderUseCommand(ICommandSender sender) {
@@ -62,8 +77,8 @@
     /**
      * Adds the strings available in this command to the given list of tab completion options.
      *
-     * @param p_71516_1_
-     * @param p_71516_2_
+     * @param sender
+     * @param argString
      */
     @Override
     public List addTabCompletionOptions(ICommandSender sender, String[] argString) {
@@ -73,8 +88,8 @@
     /**
      * Return whether the specified command parameter index is a username parameter.
      *
-     * @param p_82358_1_
-     * @param p_82358_2_
+     * @param argString
+     * @param index
      */
     @Override
     public boolean isUsernameIndex(String[] argString, int index) {
@@ -122,4 +137,24 @@
     public int compareTo(Object o) {
         return 0;
     }
+
+    private void scanForBiomeMatch(int centerX, int centerZ, String requestedBiomeName){
+        boolean success = false;
+        for(int i=(centerX - (scanRadius*chunkSize)); i<(centerZ + (scanRadius*chunkSize)); i += chunkSize){
+            for(int j=(centerZ - (scanRadius*chunkSize)); j<(centerZ + (scanRadius*chunkSize)); j += chunkSize){
+                String biomeName = world.getBiomeGenForCoords(i, j).biomeName;
+                    if (biomeName.toLowerCase().equals(requestedBiomeName)) {
+                        success = true;
+                        logger.info(i + "," + j + " = " + biomeName);
+                        return;
+                    }
+                }
+            }
+        if (success == false){
+            logger.info("A "+ requestedBiomeName + " biome was not located within the search radius.");
+            return;
+
+        }
+        }
+
-}
+    }
